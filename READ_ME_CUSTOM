To create react application in your local machine:
1.npx create-react-app project-name

cd my-app 
run -> npm start

2.npm create vite@latest (Angular, React, Vue)

React 

Project name

3.webpack

it will give you boiler plate code 


many ways to create a react application 

1.Webpack (longer process)
npm init    
    package.json

2.npx create-react-app my-app (recommended way)

npm run test
to validate your test suite

npm run build
to build your application, it will gendrate a dist folder (Production code)


offical React documentation:
https://react.dev/learn/start-a-new-react-project

1.How to create a react application
2.Folder structure
3.Node modules usage and libraries
4.Component
    1.Class based component - stateful, 16.7 class only
    2.Functional based component stateless, dump 16.8 >

    current version 18.2

5.JSX
    Javascript extension

6.props

7.setState method() -> class component 
    functional component 
        const [name, setName] = useState('Kholi')
        setName('Virat Kholi')

        {name}

8.States ->
     Class component, 
        this.state = {
            interests: [

            ]
        }

        to update the state in class component
            setState()
     functional component 

        useState() => Hooks
            const [name, setName] = useState(initial value)
             to update the state in functional component

                setName("")

9.Events 
    onClick
    OnChange
    OnMouseOver
    OnMouseIn
    OnSubmit

10.Hook introduction 
    useState()                

01/09/2024

-> VsCode extensions ES7+ React/Redux/React-Native snippets  v4.4.3 
-> Event Handlers in class/functional component (onClick, onChange)
-> Different approachs to write event handlers in class component
-> Method As props (Passing data from child to parent component)

Upcoming topics to cover

-> Conditional Rendering
-> List Rendering
-> Lists and Keys
-> Styles in React
    MUI
    chakra ui
-> Form Handling
->Fragments Completed


-> Lifecycle Hooks
    Mouting  Component creation phase   
    componentDidMount(){
        
    }    
    Updating Component Updation phase
    componentDidUpdate(){
        
    }   
    Unmouting Component destroy phase
    componentWillUnmount(){
            
        }   
->Pure Component -> Class component -> Avoid the re-rendering 
->Memo ->  Functional component -> Avoid the re-rendering

==

->Refs
->Portals
->Error Boundary
->HOC (Higher Order component)
->Render props
->Context
->http -> axios for API integration


Hooks
    useState()
    useEffect() => to create a side effect / Replacement for class component's life cycle nethod
    useRef() -> to manipulate DOM
    useMemo() -> memozatation
    useCallback()
    useContext() 
    useReducer()- > State management
    useId() -> to gendratge an uniquw id

    Project 
        Movie booking app 


        Test Driven Development (TDD)
            T -> unit testing 90 -95% test coverage for all the spec files
                it('login page verivifation',()=>{
                    tobe()
                })
            D -> Devlopment
                <form onSubmit={submitHandler}>
                    <input type="text" value={this.state.username} placeholder="username" />
                    <input type="password" value={this.state.password} placeholder="password" />
                    <button>Submit</button>
                </form>
            T -> Test

            
            After deployment in dev/enviorment

